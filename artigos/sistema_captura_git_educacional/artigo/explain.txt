# AFONSYSTEM - Sistema de Análise de Repositórios GitHub

## Visão Geral

O AfonSystem é uma aplicação web desenvolvida em Python usando Streamlit que permite coletar, armazenar e analisar dados de repositórios GitHub. O sistema é especialmente projetado para acompanhar o progresso de alunos em projetos de desenvolvimento, fornecendo métricas detalhadas sobre commits e pull requests.

## Arquitetura do Sistema

### 1. Estrutura de Diretórios
```
afonsystem/
├── app.py                 # Aplicação principal Streamlit
├── helpers/              # Módulos auxiliares
│   ├── app_config.py     # Configuração da aplicação
│   ├── data_collector.py # Coleta de dados do GitHub
│   ├── supabase_helper.py # Integração com Supabase
│   ├── snapshot_manager.py # Gerenciamento de snapshots
│   ├── data_analysis.py  # Análise e processamento de dados
│   ├── ui_components.py  # Componentes da interface
│   └── ...
├── models/               # Modelos de dados
│   ├── snapshot.py       # Modelos para snapshots
│   ├── commit.py         # Modelos para commits
│   └── pull_request.py   # Modelos para pull requests
├── repositories/         # Camada de acesso a dados
└── tests/               # Testes automatizados
```

### 2. Tecnologias Utilizadas

- **Streamlit**: Framework web para interface do usuário
- **GitHub API**: Coleta de dados de repositórios
- **Supabase**: Armazenamento em nuvem dos dados
- **Pandas**: Manipulação e análise de dados
- **Plotly**: Criação de gráficos interativos
- **Pydantic**: Validação de dados e modelos
- **PyArrow**: Formato Parquet para armazenamento eficiente

## Funcionamento Detalhado

### 1. Configuração Inicial

O sistema requer as seguintes variáveis de ambiente:
- `GITHUB_TOKEN`: Token de acesso à API do GitHub
- `SUPABASE_URL`: URL do projeto Supabase
- `SUPABASE_ANON_KEY`: Chave anônima do Supabase
- `REPO_NAMES`: Lista de repositórios (formato: "owner/repo1,owner/repo2")

### 2. Fluxo Principal da Aplicação

#### 2.1 Interface Principal (app.py)
- Configuração da página Streamlit
- Seleção de trimestre (atualmente "2025-1B")
- Seleção de repositório
- Criação de snapshots
- Visualização de análises

#### 2.2 Criação de Snapshots

**Processo:**
1. Usuário seleciona um repositório
2. Clica em "Criar Snapshot"
3. Sistema coleta dados via GitHub API:
   - Todos os commits do repositório
   - Todos os pull requests (abertos e fechados)
4. Dados são processados e armazenados em formato Parquet
5. Metadados são salvos em JSON
6. Arquivos são enviados para o Supabase Storage

**Estrutura de Dados Coletados:**
- **Commits**: SHA, mensagem, autor, data, URL
- **Pull Requests**: número, título, autor, estado, data de criação, URL

### 3. Armazenamento de Dados

#### 3.1 Estrutura no Supabase
```
bucket: afonsystem/
└── 2025-1B/                    # Trimestre
    └── snapshot_repo_timestamp/ # ID do snapshot
        ├── commits.parquet      # Dados dos commits
        ├── pull_requests.parquet # Dados dos PRs
        └── metadata.json        # Metadados do snapshot
```

#### 3.2 Formato Parquet
- Armazenamento eficiente e compacto
- Suporte a consultas rápidas
- Compatibilidade com pandas

### 4. Análise de Dados

#### 4.1 Classificação de Commits
O sistema classifica commits automaticamente baseado na mensagem:
- **feat**: Novas funcionalidades
- **fix**: Correções de bugs
- **docs**: Documentação
- **style**: Formatação de código
- **refactor**: Refatoração
- **test**: Testes
- **chore**: Tarefas de manutenção
- **other**: Outros tipos

#### 4.2 Métricas Disponíveis

**KPIs Gerais:**
- Total de commits por tipo
- Total de pull requests
- Distribuição temporal de atividades

**Análise Individual:**
- Commits por aluno
- Tipos de commits por aluno
- Timeline de atividades por aluno

**Análise de Pull Requests:**
- Estado dos PRs (aberto/fechado)
- Autores dos PRs
- Timeline de criação

### 5. Interface do Usuário

#### 5.1 Componentes Principais

1. **Seletor de Trimestre**: Permite organizar dados por período acadêmico
2. **Seletor de Repositório**: Lista repositórios configurados
3. **Botão de Criação de Snapshot**: Inicia coleta de dados
4. **Seletor de Snapshot**: Lista snapshots disponíveis para análise
5. **Filtro de Sprint**: Permite analisar períodos específicos
6. **Gráficos Interativos**: Visualizações usando Plotly

#### 5.2 Visualizações Disponíveis

- **Gráfico de Pizza**: Distribuição de tipos de commits
- **Gráfico de Linha**: Commits por dia
- **Gráfico de Barras**: Análise individual por aluno
- **Tabelas**: Lista de commits e PRs recentes

### 6. Funcionalidades Avançadas

#### 6.1 Cache Inteligente
- Dados são carregados automaticamente na primeira seleção
- Armazenamento em session_state do Streamlit
- Evita recarregamento desnecessário

#### 6.2 Tratamento de Erros
- Validação de configurações
- Tratamento de erros de API
- Mensagens informativas para o usuário

#### 6.3 Progresso em Tempo Real
- Feedback durante criação de snapshots
- Indicadores de progresso
- Mensagens de status

## Casos de Uso

### 1. Professor/Monitor
- Acompanhar progresso dos alunos
- Identificar alunos com baixa atividade
- Analisar qualidade dos commits
- Avaliar participação em pull requests

### 2. Aluno
- Visualizar próprio progresso
- Comparar com colegas
- Identificar áreas de melhoria
- Acompanhar evolução temporal

### 3. Coordenação
- Relatórios de turma
- Análise de tendências
- Identificação de problemas
- Planejamento de intervenções

## Vantagens do Sistema

1. **Automatização**: Coleta automática de dados
2. **Eficiência**: Armazenamento otimizado em Parquet
3. **Escalabilidade**: Arquitetura baseada em nuvem
4. **Flexibilidade**: Suporte a múltiplos repositórios
5. **Visualização**: Gráficos interativos e informativos
6. **Organização**: Estrutura por trimestres
7. **Confiabilidade**: Validação de dados e tratamento de erros

## Configuração e Deploy

### Requisitos
- Python 3.8+
- Conta no GitHub com token de acesso
- Projeto Supabase configurado
- Dependências listadas em requirements.txt

### Instalação
1. Clone o repositório
2. Instale dependências: `pip install -r requirements.txt`
3. Configure variáveis de ambiente
4. Execute: `streamlit run app.py`

## Manutenção e Evolução

O sistema foi projetado com:
- Código modular e bem estruturado
- Testes automatizados
- Documentação clara
- Separação de responsabilidades
- Fácil extensibilidade

Permite adicionar facilmente:
- Novos tipos de análise
- Diferentes fontes de dados
- Novas visualizações
- Integração com outros sistemas
